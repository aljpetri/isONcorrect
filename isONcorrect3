#! /usr/bin/env python

from __future__ import print_function
import os,sys
import argparse

import errno
from time import time
import itertools

import math
import re
from collections import deque
from collections import defaultdict

import edlib

from modules import correct_seqs, create_augmented_reference, align, help_functions

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)



def get_kmer_minimizers(seq, k_size, w_size):
    # kmers = [seq[i:i+k_size] for i in range(len(seq)-k_size) ]
    w = w_size - k_size
    window_kmers = deque([seq[i:i+k_size] for i in range(w +1)])
    curr_min = min(window_kmers)
    minimizers = [ (curr_min, list(window_kmers).index(curr_min)) ]

    for i in range(w+1,len(seq) - k_size):
        new_kmer = seq[i:i+k_size]
        # updateing window
        discarded_kmer = window_kmers.popleft()
        window_kmers.append(new_kmer)

        # we have discarded previous windows minimizer, look for new minimizer brute force
        if curr_min == discarded_kmer: 
            curr_min = min(window_kmers)
            minimizers.append( (curr_min, list(window_kmers).index(curr_min) + i - w ) )

        # Previous minimizer still in window, we only need to compare with the recently added kmer 
        elif new_kmer < curr_min:
            curr_min = new_kmer
            minimizers.append( (curr_min, i) )

    return minimizers

def get_kmer_maximizers(seq, k_size, w_size):
    # kmers = [seq[i:i+k_size] for i in range(len(seq)-k_size) ]
    w = w_size - k_size
    window_kmers = deque([seq[i:i+k_size] for i in range(w +1)])
    curr_min = max(window_kmers)
    minimizers = [ (curr_min, list(window_kmers).index(curr_min)) ]

    for i in range(w+1,len(seq) - k_size):
        new_kmer = seq[i:i+k_size]
        # updateing window
        discarded_kmer = window_kmers.popleft()
        window_kmers.append(new_kmer)

        # we have discarded previous windows minimizer, look for new minimizer brute force
        if curr_min == discarded_kmer: 
            curr_min = max(window_kmers)
            minimizers.append( (curr_min, list(window_kmers).index(curr_min) + i - w ) )

        # Previous minimizer still in window, we only need to compare with the recently added kmer 
        elif new_kmer > curr_min:
            curr_min = new_kmer
            minimizers.append( (curr_min, i) )

    return minimizers


def get_minimizers_and_positions_compressed(reads, w, k, hash_fcn):
    # 1. homopolymenr compress read and obtain minimizers
    M = {}
    for r_id in reads:
        (acc, seq, qual) = reads[r_id]

        seq_hpol_comp = ''.join(ch for ch, _ in itertools.groupby(seq))

        if hash_fcn == "lex":
            minimizers = get_kmer_minimizers(seq_hpol_comp, k, w)
        elif hash_fcn == "rev_lex":
            minimizers = get_kmer_maximizers(seq_hpol_comp, k, w)

        indices = [i for i, (n1,n2) in enumerate(zip(seq[:-1],seq[1:])) if n1 != n2] # indicies we want to take quality values from to get quality string of homopolymer compressed read 
        indices.append(len(seq) - 1)
        positions_in_non_compressed_sring = [(m, indices[p]) for m, p in minimizers ]
        M[r_id] = positions_in_non_compressed_sring

    return M


def get_minimizers_and_positions(reads, w, k, hash_fcn):
    # 1. homopolymenr compress read and obtain minimizers
    M = {}
    for r_id in reads:
        (acc, seq, qual) = reads[r_id]
        if hash_fcn == "lex":
            minimizers = get_kmer_minimizers(seq, k, w)
        elif hash_fcn == "rev_lex":
            minimizers = get_kmer_maximizers(seq, k, w)

        M[r_id] = minimizers

    return M


# def get_minimizers_comb(reads, M, k, x):
#     reads_to_minimizer_combinations_database = {}
#     M2 = defaultdict(lambda: defaultdict(list))
#     for r_id in M:
#         # print(reads[r_id][1])
#         reads_to_M2[r_id] = [] # defaultdict(list)
#         minimizers = M[r_id]
#         for (m1,p1), (m2, p2) in  minimizers_comb_iterator(minimizers, k, x):
#             # reads_to_M2[r_id][(m1, m2)].append((p1,p2))
#             reads_to_M2[r_id].append( ((m1,p1), (m2,p2)) )
#             M2[(m1, m2)][r_id].append((p1,p2))
#     return reads_to_M2, M2

def get_minimizer_combinations_database(reads, M, k, x_low, x_high):
    M2 = defaultdict(lambda: defaultdict(list))
    for r_id in M:
        minimizers = M[r_id]
        for (m1,p1), m1_curr_spans in  minimizers_comb_iterator(minimizers, k, x_low, x_high):
            for (m2, p2) in m1_curr_spans:
                M2[m1][m2].append((r_id, p1, p2))
    return M2



def minimizers_comb_iterator(minimizers, k, x_low, x_high):
    # print("read")
    for i, (m1, p1) in enumerate(minimizers[:-1]):
        m1_curr_spans = []
        for j, (m2, p2) in enumerate(minimizers[i+1:]):
            if x_low < p2 - p1 and p2 - p1 <= x_high:
                m1_curr_spans.append( (m2, p2) )
                # yield (m1,p1), (m2, p2) 
            elif p2 - p1 > x_high:
                break
        yield (m1, p1), m1_curr_spans


# def time_test(sorted_left_reads, sorted_right_reads, relevant_reads, r_id, k, x):
#     curr_min_r_pos = 0
#     for l_pos in sorted_left_reads:
#         tmp_add = 0
#         for j, r_pos in enumerate(sorted_right_reads[curr_min_r_pos:]):
#             if k < r_pos - l_pos <= x:
#                 relevant_reads[r_id].append((l_pos, r_pos))
#             elif l_pos > r_pos:
#                 tmp_add = j 
#                 continue
#             elif r_pos > l_pos + x:
#                 break
#         curr_min_r_pos += tmp_add   


# def get_relevant_reads(M2, m1, m2):
#     return M2[m1][m2]



def edlib_alignment(x, y, k):
    # if i == 100 and j % 1000 == 0:
    #     print("Edlib processed alignments: {0}".format(j+1))

    result = edlib.align(x,y, "NW", 'distance', k) # , task="path")
    ed = result["editDistance"]
    return ed

def get_best_corrections(curr_best_seqs, k_size, outfolder, v_depth_ratio_threshold = 0.2):
    weight = len(curr_best_seqs)
    # r_seq = curr_best_seqs["curr_read"][0]
    # print(r_seq)
    # print(curr_best_seqs)
    # sys.exit()
    #### TMP
    #### TMP
    reads_path = open(os.path.join(outfolder, "reads_tmp.fa"), "w")

    # for q_id, (s_tmp, s_qual, pos1, pos2) in curr_best_seqs.items():
    for q_id, list_of_spans in curr_best_seqs.items():
        for (seq, qual, pos1, pos2) in list_of_spans:
            # print(q_id, str(pos1), str(pos2))
            reads_path.write(">{0}\n{1}\n".format(str(q_id)+str(pos1)+str(pos2), seq))
    reads_path.close()
    spoa_ref, msa = create_augmented_reference.run_spoa(reads_path.name, "/dev/null", os.path.join(outfolder,"spoa_tmp.fa"), "spoa", "/dev/null")
    # print()
    # print(spoa_ref)
    #### TMP
    #### TMP
    partition = {"ref" : (0, spoa_ref, spoa_ref, 1)}
    # partition = {"ref" : (0, r_seq, r_seq, 1)}
    # for q_id, (s_tmp, s_qual, pos1, pos2) in curr_best_seqs.items():
    for q_id, list_of_spans in curr_best_seqs.items():
        for (seq, qual, pos1, pos2) in list_of_spans:
        # if s_tmp == r_seq:
        #     continue
            res = edlib.align(seq, spoa_ref, task="path", mode="NW")
            # result_read_to_ref = edlib.align(seq, ref_tmp, task="path", mode="HW")
            # print(result_read_to_ref)
            cigar_string = res["cigar"]
            read_alignment, ref_alignment = help_functions.cigar_to_seq(cigar_string, seq, spoa_ref)
            partition[(q_id, pos1, pos2)] = (res["editDistance"], ref_alignment, read_alignment, 1)
        # print(read_alignment, ref_alignment)
    alignment_matrix = correct_seqs.create_multialignment_matrix(partition)
    # print(alignment_matrix)
    # for r_tmp, aln_list in alignment_matrix.items():
    #     print(aln_list)
    nr_columns = len(alignment_matrix["ref"])
    PFM = [{"A": 0, "C": 0, "G": 0, "T": 0, "U" : 0, "-": 0, "N": 0} for j in range(nr_columns)]
    for r_tmp, aln_list in alignment_matrix.items():
        if r_tmp == "ref":
            continue
        for j, n in enumerate(aln_list):
            PFM[j][n] += 1
    # print(PFM)

    other_corrections = defaultdict(list)
    # read_aln = alignment_matrix["curr_read"]

    # get homopolymer adjustment
    h_tmp = [len(list(_)) for ch, _ in itertools.groupby(spoa_ref) ]
    # print(h_tmp)
    # print(spoa_ref)
    h_tmp2 = []
    h_tmp2 = [c for c in h_tmp for i in range(c)]
    # print(h_tmp2)
    assert len(h_tmp2) == len(spoa_ref)
    curr_pos = 0
    h_pol_counts = []
    n_cols = len(h_tmp2)
    for nucl in alignment_matrix["ref"]:
        # print(curr_pos, len(h_tmp2))
        h_pol_counts.append(h_tmp2[min(n_cols - 1,curr_pos)])
        if nucl != "-":
            curr_pos += 1
    # print(alignment_matrix["ref"])
    # print(h_pol_counts)    
    assert len(alignment_matrix["ref"]) == len(h_pol_counts)

    # if "CCTCAGCA" in spoa_ref:
    #     print("Minor", spoa_ref)
    #     # print(PFM)

    # if "CCTCTGCA" in spoa_ref:
    #     print("Major", spoa_ref)
    #     # indx = spoa_ref.index("CCTCTGCA")
    #     # print(PFM)

    for i, d in enumerate(PFM):
        n_max, count_max = max(d.items(), key = lambda x: x[1])
        if n_max == "-":
            c, n_max2 = max([(c,n) for n,c in d.items() if n != "-"])
            if h_pol_counts[i]*c > count_max:
                n_max = n_max2 
                count_max = c
            # if c > 0.4*count_max:
            #     n_max = n_max2 

        # tot_depth = sum(d.values())
        # del_ratio = v_depth_ratio_threshold*h_pol_counts[i]
        # print(read_nucl, d[read_nucl], n_max, count_max)

        # if n_max == "-":
        #     c, n_max2 = max([(c,n) for n,c in d.items() if n != "-"])
        #     if c > count_max/float(h_pol_counts[i]):
        #         n_max = n_max2
        #         count_max = c

        # curr_read_corr = []
        ref_nucl = alignment_matrix["ref"][i]
        for q_id_tuple in alignment_matrix:
            if q_id_tuple == "ref":
                continue

            read_nucl = alignment_matrix[q_id_tuple][i]
            if read_nucl != "-" and ref_nucl != "-" and read_nucl != ref_nucl:
                if d[ref_nucl] * v_depth_ratio_threshold <= d[read_nucl]: # potential variant position
                    # print(q_id_tuple[0])
                    # if q_id_tuple[0] == "curr_read":
                    #     print("Preserving", read_nucl, "from", ref_nucl,  d[ref_nucl], v_depth_ratio_threshold, d[read_nucl], q_id_tuple)
                    other_corrections[q_id_tuple].append(read_nucl)
                else:
                    other_corrections[q_id_tuple].append(n_max)

            else:
                other_corrections[q_id_tuple].append(n_max)



            # OLD METHOD
            
            # if alignment_matrix["ref"][i] != "-" and alignment_matrix[q_id_tuple][i] != "-" and alignment_matrix["ref"][i] != alignment_matrix[q_id_tuple][i]:
            #     if d[alignment_matrix["ref"][i]] * v_depth_ratio_threshold <= d[alignment_matrix[q_id_tuple][i]]: # potential variant position
            #         # print("SAVED varinant")
            #         other_corrections[q_id_tuple].append(alignment_matrix[q_id_tuple][i]) # preserve substitution
            #     else:
            #         other_corrections[q_id_tuple].append(n_max)              

            # if n_max != '-' and alignment_matrix[q_id_tuple][i] != '-': 
            #     # variants = d.items()
            #     # if n_max != alignment_matrix[q_id_tuple][i]:
            #         # print("here!!!!!!!!!", count_max, d[alignment_matrix[q_id_tuple][i]])

            #     if n_max != alignment_matrix[q_id_tuple][i] and count_max * v_depth_ratio_threshold <= d[alignment_matrix[q_id_tuple][i]]: # potential variant position
            #         # print("SAVED varinant")
            #         other_corrections[q_id_tuple].append(alignment_matrix[q_id_tuple][i]) # preserve substitution
            #     else:
            #         other_corrections[q_id_tuple].append(n_max)
            
            # elif n_max == '-' and alignment_matrix[q_id_tuple][i] != '-':
            #     if n_max != alignment_matrix[q_id_tuple][i] and count_max * v_depth_ratio_threshold < d[alignment_matrix[q_id_tuple][i]]: # potential variant position
            #         # print("SAVED varinant")
            #         other_corrections[q_id_tuple].append(alignment_matrix[q_id_tuple][i]) # preserve substitution
            #     else:
            #         other_corrections[q_id_tuple].append(n_max)


            # else:
            #     # if d[alignment_matrix["ref"][i]] * v_depth_ratio_threshold <= d[alignment_matrix[q_id_tuple][i]]: # potential variant position
            #     #     # print("SAVED varinant")
            #     #     other_corrections[q_id_tuple].append(alignment_matrix[q_id_tuple][i]) # preserve substitution
            #     # else:
            #     #     other_corrections[q_id_tuple].append(n_max)   
            #     other_corrections[q_id_tuple].append(n_max)



    other_corrections_final = defaultdict(list)
    for q_id_tuple in other_corrections:
        other_read_corr = other_corrections[q_id_tuple]
        other_read_corr = "".join([n for n in other_read_corr if n != "-"])
        # print(q_id_tuple)
        q_id, q_p1, q_p2 = q_id_tuple
        # print()
        other_corrections_final[q_id].append( (q_p1 + k_size, q_p2, weight, other_read_corr[k_size:-k_size] ))

        if q_id == "curr_read":
            curr_read_corr = "".join([n for n in other_read_corr if n != "-"])
        # if other_read_corr[k_size:-k_size] == "ACTCAAGCATTA":
        #     print(q_id, curr_best_seqs[q_id][2], curr_best_seqs[q_id][3])
        #     print(curr_best_seqs[q_id][2], curr_best_seqs[q_id][3])
        #     sys.exit()
    # print(other_read_corr)
    # sys.exit()
    return curr_read_corr[k_size:-k_size], other_corrections_final


def solve_WIS(all_intervals_sorted_by_finish):
    p = [None]
    v = [None] + [w*(stop-start) for (start, stop, w, _) in all_intervals_sorted_by_finish]
    for j, (start, stop, w, _) in enumerate(all_intervals_sorted_by_finish):
        if j == 0:
            p.append(0)
            continue

        k = j - 1
        while k >= 0:
            if all_intervals_sorted_by_finish[k][1] <= start:
                break
            k -= 1
        p.append(max(0,k))

    # for i, interval in enumerate(all_intervals_sorted_by_finish):
    #     print(i, p[i], interval[0], interval[1], interval[2])

    OPT = [0]
    for j in range(1, len(all_intervals_sorted_by_finish) +1):
        OPT.append( max(v[j] + OPT[ p[j] ], OPT[j-1] ) )
    # print(OPT, OPT[-1], all_intervals_sorted_by_finish)

    assert len(p) == len(all_intervals_sorted_by_finish) + 1 == len(v) == len(OPT)

    # Find solution
    # def find_solution(j, opt_indicies): 
    #     if j == 0:
    #         return 
    #     elif v[j] + OPT[p[j]] > OPT[j-1]:
    #         print(j)
    #         opt_indicies.append(j - 1) # we have shifted all indices forward by one so we neew to reduce to j -1 because of indexing in python works
    #         find_solution( p[j], opt_indicies ) 
    #     else:
    #         find_solution(j-1, opt_indicies) 
    # opt_indicies = []
    # find_solution(len(all_intervals_sorted_by_finish), opt_indicies)
    # print("test",opt_indicies)

    # Find solution
    opt_indicies = []
    j = len(all_intervals_sorted_by_finish)
    while j >= 0:
        if j == 0:
            break
        if v[j] + OPT[p[j]] > OPT[j-1]:
            # print(j)
            opt_indicies.append(j - 1) # we have shifted all indices forward by one so we neew to reduce to j -1 because of indexing in python works
            j = p[j]
            # find_solution( p[j], opt_indicies ) 
        else:
            j -= 1
    # print( "hi", opt_indicies2)
    # assert opt_indicies2 == opt_indicies
    return opt_indicies

D = {chr(i) : min( 10**( - (ord(chr(i)) - 33)/10.0 ), 0.79433)  for i in range(128)}


def eval_sim(corr, seq, qual, tot_before, tot_after):
    true = "AGCAATCAGACTCAAGCATTAAAATACCCGCCCAGAATATGCCATCAAACTGCCTGGCCCGACAAATTAATGCTGAAATTGTTAACTGACCGGAGGTCGACGTACCGACACTAGGAGGAGCGGGACTGTAGGAAAACCACTATCCTTTTC"
    r1 = edlib.align(true, corr, task="path", mode="NW")
    ref_alignment1, read_alignment = help_functions.cigar_to_seq(r1["cigar"], true, corr)

    ins = len([1 for n in ref_alignment1[10:-10] if n == "-"])
    del_ = len([1 for n in read_alignment[10:-10] if n == "-"])
    subs =  len([p for p, (n1,n2) in enumerate(zip(read_alignment[10:-10], ref_alignment1[10:-10])) if n1 != "-" and n2 != "-" and n1 != n2 ])
    tot_after["subs"] += subs
    tot_after["ins"] += ins
    tot_after["del"] += del_

    r2 = edlib.align(true, seq, task="path", mode="NW")
    ref_alignment2, read_orig_alignment = help_functions.cigar_to_seq(r2["cigar"], true, seq)

    ins = len([1 for n in ref_alignment2 if n == "-"])
    del_ = len([1 for n in read_orig_alignment if n == "-"])
    subs =  r2["editDistance"] - ins - del_
    tot_before["subs"] += subs
    tot_before["ins"] += ins
    tot_before["del"] += del_

def eval_sim2(corr, seq, qual, tot_before, tot_after):
    true = "GCCAACGGCTTGGTGCCAAACACAATCGTCGTTGTCAATAACGCCTGCTAATCACTGCTTGGTGCGGCAGCTTGCTAACGATGAAAAGATTTGGATGGGTCCGATCTAATTACACGATAACGTGAGTCTAACCCTTAGTCTGTAAGAACT"
    r1 = edlib.align(true, corr, task="path", mode="NW")
    ref_alignment1, read_alignment = help_functions.cigar_to_seq(r1["cigar"], true, corr)

    ins = len([1 for n in ref_alignment1 if n == "-"])
    del_ = len([1 for n in read_alignment if n == "-"])
    subs =  len([p for p, (n1,n2) in enumerate(zip(read_alignment, ref_alignment1)) if n1 != "-" and n2 != "-" and n1 != n2 ])
    tot_after["subs"] += subs
    tot_after["ins"] += ins
    tot_after["del"] += del_

    r2 = edlib.align(true, seq, task="path", mode="NW")
    ref_alignment2, read_orig_alignment = help_functions.cigar_to_seq(r2["cigar"], true, seq)

    ins = len([1 for n in ref_alignment2 if n == "-"])
    del_ = len([1 for n in read_orig_alignment if n == "-"])
    subs =  r2["editDistance"] - ins - del_
    tot_before["subs"] += subs
    tot_before["ins"] += ins
    tot_before["del"] += del_


def find_most_supported_span(r_id, m1, p1, m1_curr_spans, minimizer_combinations_database, reads, all_intervals, k_size):

    # curr_m_pos = read_min_comb[0][0][1]
    # curr_m_pos2 = read_min_comb[0][1][1]
    acc, seq, qual = reads[r_id]
    curr_best_seqs = {}
    curr_best_seqs_to_id = {}
    # cnt = 0
    for (m2,p2) in m1_curr_spans:
        relevant_reads = minimizer_combinations_database[m1][m2]
        
        # rr1 = len(relevant_reads)
        # # print( "bef:", len(relevant_reads))
        # relevant_reads = [(relevant_read_id, pos1, pos2) for relevant_read_id, pos1, pos2  in relevant_reads if math.fabs( (p2-p1) - (pos2 - pos1)) / min((pos2 - pos1), (p2-p1)) <= 0.4 ] # passing first edit distance check
        # rr2 = len(relevant_reads)
        # if rr1 > rr2:
        #     print(rr1, rr2)
        # # print("after:", len(relevant_reads))
        # if len(relevant_reads) > 250:
        #     print("lol repeat", len(relevant_reads), m1, m2)
        seqs = defaultdict(list)
        if len(relevant_reads) >= max(3,len(curr_best_seqs)): #max(3, previously_calculated_regions_read[p2]): # 
            # cnt += 1
            ref_seq = seq[p1  : p2 + k_size]
            ref_qual = qual[p1 : p2 + k_size]
            p_error_ref =  sum([D[char_] for char_ in ref_qual])/len(ref_qual) 

            seqs["curr_read"].append((ref_seq, ref_qual, p1, p2))
            seqs_to_id = { ref_seq : [ ("curr_read",p1, p2)]}

            # print(p1, p2) #, relevant_reads)
            # print(m1,m2)
            # print(r_id, seq[p1:p2])
            for relevant_read_id, pos1, pos2 in relevant_reads:
                if r_id  == relevant_read_id:
                    continue
                read_seq = reads[relevant_read_id][1][pos1: pos2 + k_size]
                read_qual = reads[relevant_read_id][2][pos1: pos2 + k_size]
                # print(seq[p1+k_size : p2], read_seq, p1, p2, pos1, pos2, reads[relevant_read_id][1][pos1 : pos1 + k_size ], seq[p1:p1+k_size], reads[relevant_read_id][1][pos2 : pos2 +k_size],  seq[p2:p2+k_size])
                # print(edlib_alignment(ref_seq, read_seq, len(ref_seq)),  ref_seq, read_seq, (pos1, pos2), (p1,p2), relevant_read_id)
                p_error_sum_thresh = p_error_ref + sum([D[char_] for char_ in read_qual])/len(read_qual) + 0.1
                # print("p_error_sum", p_error_sum_thresh)
                # if reads[relevant_read_id][1][pos1 : pos1 + k_size ] ==  seq[p1:p1+k_size] and reads[relevant_read_id][1][pos2 : pos2 +k_size] ==  seq[p2:p2+k_size]:
                # if math.fabs(len(ref_seq) - len(read_seq)) / len(read_seq) <= p_error_sum_thresh:
                if edlib_alignment(ref_seq, read_seq, p_error_sum_thresh*len(ref_seq)) >= 0:    # passing second edit distance check
                    seqs[relevant_read_id].append((read_seq, read_qual, pos1, pos2))
                # else:`
                #     ed = edlib_alignment(ref_seq, read_seq, 100)
                #     print(ed, ref_seq, read_seq, p1,p2, pos1,pos2)
                    # if read_seq in seqs_to_id:
                    #     seqs_to_id[read_seq].append( (relevant_read_id, pos1 + k_size, pos2 ) )
                    # else:
                    #     seqs_to_id[read_seq] = [(relevant_read_id, pos1 + k_size, pos2 )]

                    # print(relevant_read_id, read_seq)
            # print(p1,p2, len(seqs))

        # if len(seqs) > 2:
        #     all_intervals.append( (p1 + k_size, p2,  len(seqs), seqs) )

        if len(seqs) > len(curr_best_seqs):
            curr_best_seqs = seqs
            # curr_best_seqs_to_id = seqs_to_id
            curr_best_stop = p2


    if len(curr_best_seqs) > 2:
        all_intervals.append( (p1 + k_size, curr_best_stop,  len(curr_best_seqs), curr_best_seqs) )
        
        # for q_id, (read_seq, read_qual, pos1, pos2) in curr_best_seqs.items():
        #     if q_id != "curr_read":
        #         stored_calculated_regions[q_id][pos1] = len(curr_best_seqs)


def correct_read(seq, opt_indicies, all_intervals_sorted_by_finish, k_size, outfolder, v_depth_ratio_threshold):
    corr_seq = []
    # print(opt_indicies)
    other_reads_corrected_regions = defaultdict(list)
    first_start = all_intervals_sorted_by_finish[opt_indicies[0]][0]
    final_stop = all_intervals_sorted_by_finish[opt_indicies[-1]][1]
    prev_stop = 0
    for j in opt_indicies:
        # print(all_intervals_sorted_by_finish[j])
        start, stop, weights, instance = all_intervals_sorted_by_finish[j]
        # print(start-7, stop+7, weights)
        if start - k_size > prev_stop and prev_stop > 0:
            # print()
            eprint("Gap in correction:", start-k_size - prev_stop, "between positions:", prev_stop, start, )
            # print()
            # sys.exit()
        prev_stop = stop + k_size

        if isinstance(instance, str): # already corrected
            best_corr = instance
        else:
            best_corr, other_corrections = get_best_corrections(instance, k_size, outfolder, v_depth_ratio_threshold) # store all corrected regions within all reads in large container and keep track when correcting new read to not re-compute these regions     
            for other_r_id, other_corr_regions in other_corrections.items():
                for region in other_corr_regions:
                    other_reads_corrected_regions[other_r_id].append(region)
        # print(seq[start: stop],  best_corr)
        corr_seq.append((start,stop, best_corr))
    # corr_seq = corr_seq
    # print(corr_seq, len(seq))
    eprint(first_start, final_stop)
    tmp = [seq[0 : corr_seq[0][0]] ]
    for cnt, (start_, stop_, seq_segment) in enumerate(corr_seq):
        tmp.append(seq_segment)
        # print(tmp)

        if cnt == len(corr_seq) - 1:
            tmp.append( seq[ stop_ : ] )
        else:
            # print(cnt)
            tmp.append( seq[ stop_ : corr_seq[cnt+1][0]] )
                    
    corr = "".join([s for s in tmp])
    return corr, other_reads_corrected_regions

def main(args):
    start = time()
    reads = { i : (acc, seq, qual) for i, (acc, (seq, qual)) in enumerate(help_functions.readfq(open(args.fastq, 'r')))}
    eprint("Correcting {0} reads.".format(len(reads)))
    start = time()
    corrected_reads = {}
    v_depth_ratio_threshold = args.T
    for k_size in range(args.k, args.k +1):
        # DBG, position_DBG = create_augmented_reference.kmer_counter(reads, k_size)
        # print("done createng DB")
        w = args.w
        x_high = args.xmax
        x_low = args.xmin
        for hash_fcn in ["lex"]: # ["lex"]: #  add "rev_lex" # add four others
            if args.compression:
                minimizer_database  = get_minimizers_and_positions_compressed(reads, w, k_size, hash_fcn)
            else:
                minimizer_database  = get_minimizers_and_positions(reads, w, k_size, hash_fcn)

            # reads_to_M2, M2 = get_minimizers_comb(reads, minimizer_database, k_size, args.X)
            minimizer_combinations_database = get_minimizer_combinations_database(reads, minimizer_database, k_size, x_low, x_high)
            # print(minimizer_database)
            eprint("done creating minimizer combinations")

            # print( [ (xx, len(reads_to_M2[xx])) for xx in reads_to_M2 ])
            # sys.exit()
            corrected_reads = {}
            tot_errors_before = {"subs" : 0, "del": 0, "ins": 0}
            tot_errors_after = {"subs" : 0, "del": 0, "ins": 0}
            tot_corr = 0
            previously_corrected_regions = defaultdict(list)
            # stored_calculated_regions = defaultdict(lambda: defaultdict(int))

            for r_id in sorted(reads): #, reverse=True):
                read_min_comb = [ ((m1,p1), m1_curr_spans) for (m1,p1), m1_curr_spans in  minimizers_comb_iterator(minimizer_database[r_id], k_size, x_low, x_high)]
                
                if args.exact:
                    previously_corrected_regions = defaultdict(list)
                # stored_calculated_regions = defaultdict(list)
        
                #  = stored_calculated_regions[r_id]
                corr_pos = []
                (acc, seq, qual) = reads[r_id]
                # print("starting correcting:", seq)
                all_intervals = []

                # print(r_id, sorted(previously_corrected_regions[r_id], key=lambda x:x[1]))
                read_previously_considered_positions = set([tmp_pos for tmp_p1, tmp_p2, w_tmp, _ in previously_corrected_regions[r_id] for tmp_pos in range(tmp_p1, tmp_p2)])
                eprint("not corrected:", [ (p1_, p2_) for p1_, p2_ in zip(sorted(read_previously_considered_positions)[:-1], sorted(read_previously_considered_positions)[1:]) if p2_ > p1_ + 1 ] )
                # if previously_corrected_regions[r_id]:
                #     read_previously_considered_positions = set([tmp_pos for tmp_p1, tmp_p2, w_tmp, _ in previously_corrected_regions[r_id] for tmp_pos in range(tmp_p1, tmp_p2)])
                #     group_id = 0
                #     pos_group = {}
                #     sorted_corr_pos = sorted(read_previously_considered_positions)
                #     for p1, p2 in zip(sorted_corr_pos[:-1], sorted_corr_pos[1:]):
                #         if p2 > p1 + 1:
                #            pos_group[p1] = group_id 
                #            group_id += 1
                #            pos_group[p2] = group_id 
                #         else:
                #            pos_group[p1] = group_id 
                #     if p2 == p1 + 1:
                #         pos_group[p2] = group_id 
                # else:
                #     read_previously_considered_positions= set()


                # read_all_pos = set(range(len(seq))) 
                # read_not_corr = read_all_pos - read_previously_considered_positions
                # print(previously_corrected_regions[r_id])
                # print(read_previously_considered_positions)
                
                # print()
                # print(len(read_not_corr), sorted(read_not_corr))
                # print()
                
                # read_prev_corrected_positions2 = defaultdict(set)
                # if len(previously_corrected_regions[r_id]) > 1:
                #     prev_regions = sorted(previously_corrected_regions[r_id], key = lambda x: x[1])
                #     for (tmp_p1, tmp_p2, w_tmp, _ ) in (tmp_p1_2, tmp_p2_2, w_tmp_2, _2 ) zip(prev_regions[r_id][:-1], prev_regions[r_id][1:]):
                #         if tmp_p2 + k_size >= tmp_p1_2:
                #             read_prev_corrected_positions2[tmp_p1] = set(range(tmp_p1, tmp_p2))
                #         else:
                #             read_prev_corrected_positions2[tmp_p1] = set(range(tmp_p1, tmp_p2))
                # print(read_prev_corrected_positions2)

                # print(read_previously_considered_positions)
                for (m1,p1), m1_curr_spans in read_min_comb: 
                    # Implement that if any position is not in range of current corrections: then correct!!! Not just start and stop
                    not_prev_corrected_spans = [(m2,p2) for (m2,p2) in m1_curr_spans if not (p1 + k_size in read_previously_considered_positions and p2 - 1 in read_previously_considered_positions) ] 
                    # not_prev_corrected_spans3 = [(m2,p2) for (m2,p2) in m1_curr_spans if not (p1 + k_size in read_previously_considered_positions and p2 - 1 in read_previously_considered_positions) or pos_group[p1 + k_size] != pos_group[p2 - 1] ] 
                    # if len(not_prev_corrected_spans) > len(not_prev_corrected_spans3):
                    #     print(len(not_prev_corrected_spans), len(not_prev_corrected_spans3))
                    # not_prev_corrected_spans2 = [(m2,p2) for (m2,p2) in m1_curr_spans if not (p1 + k_size in read_prev_corrected_positions2 and p2 - 1 in read_prev_corrected_positions2[p1 + k_size]) ]
                    
                    if not_prev_corrected_spans: # p1 + k_size not in read_previously_considered_positions:
                        find_most_supported_span(r_id, m1, p1, not_prev_corrected_spans, minimizer_combinations_database, reads, all_intervals, k_size)

    

                # sys.exit()
                eprint("Correcting read", r_id)
                # print(previously_corrected_regions[r_id])
                if previously_corrected_regions[r_id]: # add previously corrected regions in to the solver
                    all_intervals.extend(previously_corrected_regions[r_id])
                    del previously_corrected_regions[r_id]
                    # del stored_calculated_regions[r_id]


                # for tmp_, inT_ in enumerate(all_intervals):
                #     print(tmp_, inT_)
                # SYS.EXIT()
                if not all_intervals:
                    eprint("Found nothing to correct")
                    corrected_seq = seq
                else:
                    all_intervals_sorted_by_finish = sorted(all_intervals, key = lambda x: x[1])
                    # print(len(all_intervals_sorted_by_finish))
                    # sys.exit()
                    opt_indicies = solve_WIS(all_intervals_sorted_by_finish) # solve Weighted Interval Scheduling here to find set of best non overlapping intervals to correct over
                    # print(opt_indicies)
                    corrected_seq, other_reads_corrected_regions = correct_read(seq, opt_indicies[::-1], all_intervals_sorted_by_finish, k_size, args.outfolder, v_depth_ratio_threshold)
                    
                    for other_r_id, corrected_regions in other_reads_corrected_regions.items():
                        for corr_region in corrected_regions:
                            previously_corrected_regions[other_r_id].append(corr_region)

                corrected_reads[r_id] = (acc, corrected_seq, "+"*len(corrected_seq))

                print("@{0}\n{1}\n+\n{2}".format(acc, corrected_seq, "+"*len(corrected_seq) ))
                eprint("{0},{1}".format(r_id,corrected_seq))

                eval_sim2(corrected_seq, seq, qual, tot_errors_before, tot_errors_after)

    eprint("tot_before:", tot_errors_before)
    eprint("tot_after:", sum(tot_errors_after.values()), tot_errors_after)
    outfile = open(os.path.join(args.outfolder, "corrected_reads.fastq"), "w")
    eprint( len(corrected_reads))
    for r_id, (acc, seq, qual) in corrected_reads.items():
        outfile.write("@{0}\n{1}\n+\n{2}\n".format(acc, seq, qual))
    outfile.close()



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="De novo clustering of long-read transcriptome reads", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--version', action='version', version='%(prog)s 0.0.2')

    parser.add_argument('--fastq', type=str,  default=False, help='Path to input fastq file with reads')
    # parser.add_argument('--t', dest="nr_cores", type=int, default=8, help='Number of cores allocated for clustering')

    parser.add_argument('--k', type=int, default=7, help='Kmer size')
    parser.add_argument('--w', type=int, default=10, help='Window size')
    parser.add_argument('--xmin', type=int, default=14, help='Upper interval length')
    parser.add_argument('--xmax', type=int, default=80, help='Upper interval length')
    parser.add_argument('--T', type=float, default=0.2, help='Upper interval length')
    parser.add_argument('--exact', action="store_true", help='Get exact solution for WIS for evary read (recalculating weights for each read (much slower but slightly more accuracy,\
                                                                 not to be used for clusters with over ~500 reads)')
  
    parser.add_argument('--compression', action="store_true", help='Use homopolymenr compressed reads. (Deprecated, because we will have fewer \
                                                                        minmimizer combinations to span regions in homopolymenr dense regions. Solution \
                                                                        could be to adjust upper interval legnth dynamically to guarantee a certain number of spanning intervals.')
    parser.add_argument('--outfolder', type=str,  default=None, help='A fasta file with transcripts that are shared between samples and have perfect illumina support.')
    # parser.add_argument('--pickled_subreads', type=str, help='Path to an already parsed subreads file in pickle format')
    # parser.set_defaults(which='main')
    args = parser.parse_args()


    if args.xmin < 2*args.k:
        args.xmin = 2*args.k
        eprint("xmin set to {0}".format(args.xmin))

    if len(sys.argv)==1:
        parser.print_help()
        sys.exit()
    if not args.fastq and not args.flnc and not  args.ccs:
        parser.print_help()
        sys.exit()


    eprint("ARGUMENT SETTINGS:")
    for key, value in args.__dict__.items():
        eprint("{0}: {1}".format(key, value))
        # setattr(self, key, value)
    eprint()

    if args.outfolder and not os.path.exists(args.outfolder):
        os.makedirs(args.outfolder)


    # edlib_module = 'edlib'
    parasail_module = 'parasail'
    # if edlib_module not in sys.modules:
    #     print('You have not imported the {0} module. Only performing clustering with mapping, i.e., no alignment.'.format(edlib_module))
    if parasail_module not in sys.modules:
        eprint('You have not imported the {0} module. Only performing clustering with mapping, i.e., no alignment!'.format(parasail_module))
        sys.exit(1)
    if 100 < args.w or args.w < args.k:
        eprint('Please specify a window of size larger or equal to k, and smaller than 100.')
        sys.exit(1)

    main(args)

